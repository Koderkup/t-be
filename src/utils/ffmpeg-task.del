import { path as ffmpegPath } from '@ffmpeg-installer/ffmpeg'
import * as ffmpeg from 'fluent-ffmpeg'
import { Upload } from '@aws-sdk/lib-storage';
import { S3Client, S3 } from '@aws-sdk/client-s3';
ffmpeg.setFfmpegPath(ffmpegPath)

//MainProc.Req.MulterStream -> fork.stdin(ffpeg) -> MainProc.stdout -> S3.Upload(@aws-sdk/lib-storage)
function processVideo() {
  try {
    const parallelUploads3 = new Upload({
      client: new S3({}) || new S3Client({}),
      params: { Bucket, Key, Body },

      // optional tags
      tags: [
        /*...*/
      ],

      // additional optional fields show default values below:

      // (optional) concurrency configuration
      queueSize: 4,

      // (optional) size of each part, in bytes, at least 5MB
      partSize: 1024 * 1024 * 5,

      // (optional) when true, do not automatically call AbortMultipartUpload when
      // a multipart upload fails to complete. You should then manually handle
      // the leftover parts.
      leavePartsOnError: false,
    });
    ffmpeg(process.stdin)
      .videoCodec('libx264')
      .audioCodec('aac')
      .outputFormat('mp4')
      .outputOptions(['-movflags frag_keyframe+empty_moov'])
      .addOptions(['-crf 32'])
      .pipe(process.stdout, { end: true });
  } catch (err) {
    console.error(err);
  } finally {
    process.exit();
  }
}

processVideo();
